1660815901682434048 2023-05-23 01:12:22 +0000 <maguangguang> #程序员新声 Tech Lead从出色的程序员成长起来，需要面对的最大问题之一就是沟通问题，虽然看似大部分沟通问题都可以有PM来承担，但很多场景Tech Lead必须站出来承担沟通的角色，输出影响力。特别对关键干系人，技术上下文的补充和技术影响力构建非常重要。  https://t.co/9heF6O3OuT
1659051122475307008 2023-05-18 04:19:45 +0000 <maguangguang> #ChatGPT 在一个Chat中，ChatGPT给的回答随着我给出的进一步的追问，逐渐和我想要的结果相似。这种方式确实可以帮助我们逐步产出个人期望获得的文案内容。经过不断聊天聊出来的答案和最初给的答案差别很大。  https://t.co/zNal1txUoL
1657978798028251137 2023-05-15 05:18:43 +0000 <maguangguang> @ghosTM55 @kevinzhow @haoel 看过很多耗子叔的好文章，受益匪浅，R.I.P
1655813452986998784 2023-05-09 05:54:25 +0000 <maguangguang> #程序员新声 质量是个很大的话题，软件质量的提升是需要付出成本的，而更重要的是对工程文化的塑造，人人都对质量有着更高的追求。 欢迎收听新一期的程序员新声。#质量 #TechLead   https://t.co/Ody8DE5jds
1653969340818153473 2023-05-04 03:46:34 +0000 <maguangguang> #工程效能 #研发效能  效能是个非常复杂的话题，可以说人类的进步一直是在围绕这个话题，不断的革新技术，开创不同的生活和工作模式。因此，效能的复杂性是不言而喻的，我希望通过一个个小的角度来找一些实例，看看不同因素对效能会产生怎样的影响，欢迎一起讨论。  https://t.co/9XrIE3vXqH
1649380756383502336 2023-04-21 11:53:10 +0000 <maguangguang> #程序员新声 #TechLead 流程在每个团队里都存在，为了解决问题我们会加一些流程，那大家是否会下架一个不好的流程呢？欢迎收听新一期程序员新声。#流程   https://t.co/8HpSM3f1FT
1648351164369620992 2023-04-18 15:41:57 +0000 <maguangguang> RT @madawei2699: 卷了一个多月 #myGPTReader 的功能，该做的功能也都做的差不多了。虽然功能很多，但问题更多：给网页做一个总结，给电子书做一个总结，语音对话，上下文对话，这些功能其实都没有真正形成生产力的提升。玩玩也还行，但时间久了自然也就感觉没什么意…
1648174863704809472 2023-04-18 04:01:23 +0000 <maguangguang> @yin___jun 👍多谢建议，我研究一下
1646756158131277825 2023-04-14 06:03:58 +0000 <maguangguang> @_HiroKyo 关于Tech Lead相关的话题我们还录制了几期播客《程序员新声》，可以在喜马拉雅，小宇宙，谷歌/苹果的播客中搜索“程序员新声”，欢迎订阅收听。  也可以直接访问播客网站： https://t.co/XgLkLQeUVx
1646756000433848321 2023-04-14 06:03:20 +0000 <maguangguang> @_HiroKyo 谢谢，不敢称大作，推文中的链接是我的个人博客，写了一些文章，欢迎指正。  《Tech Lead之路》这本小书在博文中有链接可以免费下载。
1646676794035286017 2023-04-14 00:48:36 +0000 <maguangguang> @Riverc100 在做Tech Lead过程中遇到的大部分问题都有聊到，可以免费下载阅读，我的博客文章中有下载链接，欢迎阅读指正。
1646676150788431874 2023-04-14 00:46:02 +0000 <maguangguang> @haudanne @suclogger 可以在喜马拉雅，小宇宙，以及泛用型播客客户端，搜索 “程序员新声”。  也可以直接去我们的播客网站上听，欢迎收听讨论。   https://t.co/XgLkLQeUVx
1646506620346847236 2023-04-13 13:32:23 +0000 <maguangguang> 和同事一起合作写了一本小书《Tech Lead之路》，从萌生想法，到大家一起写作，修改文章，再到编辑成册，印制发布。今天拿到纸质书的感觉还是挺棒的，欢迎大家下载阅读指正。  https://t.co/Jc1RjnDZ7X
1644912316507635712 2023-04-09 03:57:11 +0000 <maguangguang> ChatGPT在商用上目前确实存在很大的信息安全隐患，进而造成大量经济损失。个人探索可以尝试各种可能性，但用在实际工作和项目中，目前阶段还是要讲究方法，避免输入敏感信息。
1643175650055065600 2023-04-04 08:56:18 +0000 <maguangguang> 作为Tech Lead，与开发人员、产品经理和其他团队成员合作，确保项目成功至关重要。有效沟通、任务管理、问题解决和团队文化，都是必要的。成功的团队需要密切协作。成为卓越的Tech Lead，从学习与团队其他角色协作开始。 #程序员新声 #TechLead #团队协作  https://t.co/Z13wdT4yjb
1635585624379101185 2023-03-14 10:16:15 +0000 <maguangguang> 很多情况下工具控思想优先占据高地。今年也想尝试录制视频，但头一个念头是怎么剪辑视频，并不是录什么内容。  之前聊写文章，也遇到同样的问题，有人反馈一直在折腾写作工具，也有人因为没找到趁手的工具就放弃了写文章。  从本质上看折腾工具更容易，效果可见。输出内容难度大，趋易避难可见一斑。
1635493199744757761 2023-03-14 04:08:59 +0000 <maguangguang> #程序员新声 Tech Lead需要有意识打造自己的精英团队，让团队拥有独立解决可见复杂问题的能力，而不是只靠一两个人。欢迎收听新一期程序员新声。   https://t.co/vLB6aQlpKq
1634363245040635904 2023-03-11 01:18:57 +0000 <maguangguang> 这个跳槽挑东家的思路有点意思。  不过管理多团队可能就没这么理想，有些团队的带头人能力强，抓整体就行；有些团队的带头人经验不足，遇到问题还是得自己下去多看看。  当然也可以通过人事安排把团队leader都换成自己喜欢的类型，但比较难做到。
1634362947706445824 2023-03-11 01:17:46 +0000 <maguangguang> @bearbig 这个跳槽挑东家的思路有点意思。  不过管理多团队可能就没这么理想，有些团队的带头人能力强，抓整体就行；有些团队的带头人经验不足，遇到问题还是得自己下去多看看。  当然也可以通过人事安排把团队leader都换成自己喜欢的类型，但比较难做到。
1632530765291618304 2023-03-05 23:57:20 +0000 <maguangguang> RT @haoel: 开个 thread 来做个人人都难懂的 AI 作画科普。目前主要流行的AI作画有，OpenAI的Dall-E2, Google 的 Imagen，Midjourney，有还Stability AI 公司开的 Stable Diffusion 等等。它们都是…
1631831906261299200 2023-03-04 01:40:19 +0000 <maguangguang> @tualatrix @iJoy 推荐看看《认知觉醒》，里面也大量文字讲了如何应对焦虑。可以作为一个参考角度。
1631830146884984832 2023-03-04 01:33:19 +0000 <maguangguang> #英语  在学习英语的过程中，建立一个新的语言“过滤器”，通常需要6个月才能突破平台期。很多人并不知道这个规律，努力坚持了5个月，发现自己没有进步就摇头放弃了。  坚持用英语“熏耳朵”的人，往往会在某一天突然发现，原来听不懂的英语好好像都能听懂了，这就是平台期突破的典型表现。  —《认知觉醒》
1631828635538853889 2023-03-04 01:27:19 +0000 <maguangguang> #学习的微观规律 学习的规律是开始时进步很快，后期则会变慢。  前期进步快主要在表现层面，比如掌握工具如何使用，能够通过一些最佳实践来运用知识。  但要想达到自由运用就需要深入到原理层面，通过试错积累经验，加深理解，而这个过程是漫长的。  这就是学习的平台期，在平台期要保持耐心。  https://t.co/luNru2SFke
1631825734439432192 2023-03-04 01:15:47 +0000 <maguangguang> #学习的微观规律 思考之后行动，进而获得的改变才是学习提升的关键。没有思考的量变很难引发质变。  这也是我推荐写作的原因，写作是很好的思考工具。  有多少人沉浸在缺少思考的每日打卡中，但越学越焦虑？  https://t.co/TcrBIIHm9Y
1630548494351220736 2023-02-28 12:40:29 +0000 <maguangguang> RT @tualatrix: 有时我很乐于打破旧习惯去使用新工具，有时会觉得凭啥要我去学习和适应它。同时作为工具的创造者，又认为保持开放的心态是必要的，但这个世界的工具真的太多了，我没办法整天去捣鼓各种工具，不然和折腾 Blog 平台和 Vim 插件一样，时间尽花在这里了。所以…
1630420504657170432 2023-02-28 04:11:54 +0000 <maguangguang> #写作工具 在V2EX上有V友讲了另一个坎，作为技术人，大家都有工具库，甚至在很多场景安利自己的工具有多好用。  在写作这个话题上，大概也会先找一个趁手的兵器：“如果我有了完美的工具，那写作就很简单了。可真的拿到了顺手的工具，又不知道该写什么了。”  你有没有被戳中？
1630416667158384640 2023-02-28 03:56:39 +0000 <maguangguang> #跳出舒适区 #舒适边缘区 结合上面的曲线，有耐心，但仍要努力。努力地跳出舒适区，挑战自己，但跳出舒适区不是挑战高难度，非要一跃成大神。下图中舒适边缘区可以帮我们更好地理解跳出舒适区，有挑战且自己又能够得到，有所成就，激活内在的正向激励循环，才能有所成长。  https://t.co/TFaxHZ1fOl
1629346897537400832 2023-02-25 05:05:46 +0000 <maguangguang> 焦虑来源于急于求成，想通过少量努力获得快速收益，就如武侠小说中一夜练成绝世神功。  保持自信很重要，但要接受自己不是全能侠，需要不断提升，更需要时间来让自己提升，努力但要有耐心。  https://t.co/JSzu1sF9wB
1629346895356399616 2023-02-25 05:05:46 +0000 <maguangguang> 个人习惯的养成和改变是非常难的。 工作中建立和打破一些规则也是非常难的。  因为本质上并没有建立起习惯/规则同个人的有效连接，无法激发主动性，靠自制力是不够的。  举个极端点的例子： 锻炼可以保持健康，很少人能坚持。 如果医生说只有通过锻炼才能缓解疾病，很多例子证明锻炼可以持续。
1629346892537815040 2023-02-25 05:05:45 +0000 <maguangguang> #认知觉醒 读《认知觉醒》比较有触动。每年初大家都会立各种Flag：学习的，工作的，健康的，时间很快过去，回头看大部分很难完成（一定也有毅力超群的人每年都顺利完成），因此懊恼，焦虑。  认知确实影响着一个人做事的方式和结果，我会在这个thread记录读书的体会和思考。  https://t.co/7B27qN8Arq
1628602868738691078 2023-02-23 03:49:16 +0000 <maguangguang> #程序员新声 Tech Lead开始带团队，或多或少会面临问题，比如团队内意见不同而争吵或团队成员不愿意表达想法，但做事又不完全依照团队的原则。  https://t.co/nsPSLKKUhI
1628021977515724801 2023-02-21 13:21:01 +0000 <maguangguang> 最近也在看《认知觉醒》，急于求成，趋易避难是人的天性，也是焦虑产生的原因。从内心里接纳自己，克制自己，才能逐渐思考出更适合自己的成长和提升方式，我觉得这大概就是积极意义上的“活在当下”吧。
1628018853438705666 2023-02-21 13:08:36 +0000 <maguangguang> #AI写作 AI工具可以辅助写作，如ChatGPT，Craft等，提出问题，就能生成大量文字内容。  如果想快速整理出一些相关主题的文字，写个简介等，AI工具确实高效，经过审校大概率可用。  如果想写出不一样的角度和思考，还是要依赖作者自己，AI工具可以用来帮忙润色文字，但观点还是要自己提炼。
1626776384403296257 2023-02-18 02:51:28 +0000 <maguangguang> @yfractal 不管写文章还是PPT，都是作者表达思维的一种方式，目的是把事情说清楚，逻辑顺，易理解。  如果是分享或演讲的形式，确实可以不借助任何介质，板书可能是效果最好的（想起大学的数学教授）。  如果是文字或图片的形式，首先要保证逻辑清楚，辞藻、样式、动画等是次要的，但在传播和接受效果上会加分。
1626776169147416576 2023-02-18 02:50:37 +0000 <maguangguang> 不管写文章还是PPT，都是作者表达思维的一种方式，目的是把事情说清楚，逻辑顺，易理解。  如果是分享或演讲的形式，确实可以不借助任何介质，板书可能是效果最好的（想起大学的数学教授）。  如果是文字或图片的形式，首先要保证逻辑清楚，辞藻、样式、动画等是次要的，但在传播和接受效果上会加分。
1626754966370263042 2023-02-18 01:26:22 +0000 <maguangguang> @Tisoga @xioxx55958088 写作的收益有很多，很多人会因为网络上有类似的内容就不去总结或写作。  实际上是错过了一个学习的机会，看别人总结出来的内容和自己学习总结一遍结果相差甚远。  另外，不同人思考的深度是不一样的，总结后写出的内容从质量上也有非常大的差异。  期待看到@Tisoga 总结的thread。
1626752417680482304 2023-02-18 01:16:14 +0000 <maguangguang> 任何一次认真的思考都值得被尊重，读者会从文章中看到作者的独特视角，看到作者的感悟。  同一件事可以有多样的视角和表达，拿编程语言来说，经典书籍会有很多类：由浅入深的，进阶的，讲设计思想的，讲应用的，讲案例的…  写作不要太在意网络上类似的文章，而要专注于表达自己的独特视角和思考。
1626533460335824898 2023-02-17 10:46:11 +0000 <maguangguang> @DarianLau 看来是我的标题起的不好，应该叫技术写作。  写作可以从小的短文字练习开始，比如用200字以内表达清楚你想说的内容，先挑选简单的话题。不求文采好，只求把事情说清楚。  逐渐尝试复杂的话题，大话题可以拆成小的命题或段落，每次写一段，拼起来再整体读读看是否需要修改。
1626207082444910593 2023-02-16 13:09:16 +0000 <maguangguang> 写技术文章，能用通顺易懂的语句把逻辑表达清楚就足够了，好的文笔对读者来说的确能够带来好的阅读体验，但对于技术文章而言，我一直觉得文章的逻辑设计远胜于其他。 工作中多思考，多尝试解决问题，一定会发现很多有触动的“念头”，尝试抓住这些念头，记录下当时的想法，整理逻辑，文章自然就出来了。  https://t.co/h4yKKYf3hB
1626205360053948416 2023-02-16 13:02:25 +0000 <maguangguang> 鼓励过身边很多程序员开始写作，但因为种种原因，大家始终无法开始，我总结了几个关键的心结： - 写作能力有限，怕写不好 - 很多想法网络上都有文章，没有动力 - 怕自己观点不对，误导别人（估计也怕被喷）  https://t.co/SakRZnuW9f
1620610290735017984 2023-02-01 02:29:37 +0000 <maguangguang> #程序员新声 第三弹，程序员随着经验积累，逐渐承担一定的管理工作，成长为Tech Lead，时间会被大量沟通工作占据。该如何保持对代码的熟练度？该掌握哪些技术？该如何做方案设计？如何保持技术影响力？欢迎收听新一期的 程序员新声：Tech Lead的技术成长。  https://t.co/oVrj3Bg8HZ
1608833718080397312 2022-12-30 14:33:43 +0000 <maguangguang> 整理的非常棒👍 信息过载的时代，快速获取自己需要的信息，才能有所收获，也能避免大量“无用”的信息“伤害”到自己
1608459259666366465 2022-12-29 13:45:45 +0000 <maguangguang> 写英语文章，之前就有同事建议 #DeepL 翻译后，用 #Quillbot 润色，如果加上 #ChatGPT 相信更是如虎添翼
1608453799076827136 2022-12-29 13:24:03 +0000 <maguangguang> @ayuan1000 和箭头没有任何关系，就是边框的闪烁效果造成的。仔细观察就可以发现，不同移动情况下，闪烁的规律是不同的
1608451886717480960 2022-12-29 13:16:28 +0000 <maguangguang> @Barret_China 我的手机通知只有个别app是开着的，目前感觉不是过载，确实有点信息贫瘠
1608442366947651586 2022-12-29 12:38:38 +0000 <maguangguang> #程序员新声 补发下第一期，聊聊从程序员到Tech lead的转变   https://t.co/yog3zFp2GZ
1608004462446272518 2022-12-28 07:38:33 +0000 <maguangguang> #程序员新声 第二弹，不管是Tech Lead，还是程序员，都需要不断构建个人影响力  https://t.co/vN5J1KsFpI
1604537331083771905 2022-12-18 18:01:25 +0000 <maguangguang> 恭喜阿根廷，恭喜#梅西
1604534405246365696 2022-12-18 17:49:47 +0000 <maguangguang> #点球大战 刺激！
1604462723575971841 2022-12-18 13:04:57 +0000 <maguangguang> #世界杯决赛 #阿根廷 🆚 #法国 #梅西⛽️  https://t.co/iB6GCSP077
1603583117591457794 2022-12-16 02:49:43 +0000 <maguangguang> @yuchang_me @waylybaye 厉害了，确实可以解放我这样的洗碗工了😀
1603574803931500545 2022-12-16 02:16:40 +0000 <maguangguang> @waylybaye 还没混上洗碗机，一直以为洗碗机只能放下大小不一的碗碟，居然也可以洗菜板，刷新认知。
1603574089977061376 2022-12-16 02:13:50 +0000 <maguangguang> 内容平台就是比较受限，各种黑盒的规则是没法控制的，各种原因被封，或者因平台运营不济关闭之类，还是自己的网站更靠谱。
1597476138338897922 2022-11-29 06:22:45 +0000 <maguangguang> 保证软件开发顺利且高效从来都不是某一个人的职责。Tech Lead要引领团队构建这样的团队文化，Path to Production是一个比较好的方式，既帮助团队理解产品从需求到部署到生产的整个过程，也能让所有人通过这个过程理解团队中存在的问题，激发团队成员的自主性和责任感。  https://t.co/fRw7nL4rN2
1595352659439267841 2022-11-23 09:44:48 +0000 <maguangguang> RT @madawei2699: CR 当然包含一些架构设计方面的 review，比如 API 方面的设计，当然还可以借助 ADR 来做一些设计方面的 record 与 review  https://t.co/Mn355HGZmB
1595253684262572034 2022-11-23 03:11:31 +0000 <maguangguang> Tech Lead都是从优秀的开发者中提拔的，担任Tech Lead最头疼的莫过于跟各种干系人的沟通，如何建立与各关键干系人之间的信任关系，进而推动各种技术实践在项目上落地，非常关键。  https://t.co/jPZsa8BKdf
1578725452478550017 2022-10-08 12:34:13 +0000 <maguangguang> Tech Lead作为团队中的技术引领者，肩负着指导项目技术解决方案和统一团队方向的重任，需要带领团队完成开发任务并规避技术风险。Tech Lead需要以演进的视角，持续评估项目的架构设计是否能够满足不断发展的业务目标。  https://t.co/sXs8ptAkcf
1557711295473823744 2022-08-11 12:51:28 +0000 <maguangguang> 跨功能需求是保证功能性需求正常工作的关键。跨功能需求很容易被忽视，甚至在预算不足的情况下，被搁置而成为技术债。Tech Lead要权衡跨功能需求在当前实现和延后实现的收益和成本，做出合理的决策，也要警惕因跨功能需求处理不当而引入的风险。  https://t.co/9hPjNUhhRz  https://t.co/IIajo066qy
1541262371892916224 2022-06-27 03:29:19 +0000 <maguangguang> @dotey 不错的角度，多谢分享 1. 维护成本，和架构可扩展性及耦合度相关性较大，请问衡量新功能的开发时间或者维护投入资源，有相对比较可操作的方法吗？难点在于新功能需求不一样，实现成本也会有不同 2. 故障影响，有类似mttr这样的指标，影响范围也可以统计👍🏻
1540899961868808193 2022-06-26 03:29:14 +0000 <maguangguang> 结合之前在项目上做架构治理的经验，总结了一些架构度量的维度。在长期维护的大型软件架构上，可以尝试通过一些度量来帮助找到架构问题，给架构优化一些方向上的建议。如果大家有一些其他的度量方式，欢迎补充。  https://t.co/FKRnerYwuz
1527512805121077248 2022-05-20 04:53:27 +0000 <maguangguang> 建议初期写博客的同学快速找一个喜欢的博客平台，快速写起来，前期“写”更重要，把想法落地成文字，逐渐积累成就感。  当积累了足够的文章，希望能够有不同的结构来满足各种宣传等需求，可以再折腾自建博客。  推荐自己在用的博客平台： https://t.co/nNTo6LOmiy 支持markdown，支持自定义页面，支持GA
1527509178277052416 2022-05-20 04:39:02 +0000 <maguangguang> @dingyi 30年河东，30年河西
1527278629901987840 2022-05-19 13:22:55 +0000 <maguangguang> 在微服务架构实践中，推荐每个服务要有自己独立的数据库，甚至现在一些企业会做微服务架构成熟度评估，数据库是否独立是其中很重要的一条要求。  分享一下自己的一篇文章《为什么微服务要有自己独立的数据库》  https://t.co/FnlLWrAfo9
1526057639284981760 2022-05-16 04:31:08 +0000 <maguangguang> 前几天跟家里老人讨论问题，隔代人确实是有代沟的，很多问题同代人更容易沟通，更能将心比心，隔壁邻居大妈的话肯定比我的管用。  等我们老了，就看我们这群人中有多少能抵制住骗子的诱惑，是否能抵挡新的传销模式。
1526056834528063489 2022-05-16 04:27:56 +0000 <maguangguang> “没有度量就没有管理。   没有度量就没有改进。 —— 彼得·德鲁克”  研发效能，OKR或是KPI，都以一系列可衡量的指标来校验成效。通过指标度量找到问题并加以改进，也能反应改进后的效果。  指标很神奇，关注它就像打开系统中一个开关，会有一些奇怪的反应。找到合适的指标让系统达到预期效果，非常难。
1524711778286202881 2022-05-12 11:23:10 +0000 <maguangguang> 👍老师们也在进步，这五步确实总结的不错。  《作文六要》总结了几个写作文的要点： 一要观察，洞察细节，积累写作素材 二要想象，让素材活起来 三要体验，将人心比自心，与读者共情 四要选择，选择合适的素材和字词 五要拼图，用不同素材组织方式达到不同的效果 六要表现，整个文章要完整，要有灵魂
1524708907654193159 2022-05-12 11:11:45 +0000 <maguangguang> 软件架构随着开发逐渐腐化，如何及时发现架构腐化的信号？ 结合自己的项目经验，总结了一些可以识别的信号：  https://t.co/2k5tuox7gv
1522055269538492416 2022-05-05 03:27:09 +0000 <maguangguang> 很多课本确实深刻影响了学生的认知和眼界，只能等到自己意识到才能挣脱出来
1522052356342685696 2022-05-05 03:15:34 +0000 <maguangguang> 软件架构随着开发逐渐腐化，如何及时发现架构腐化的信号？从表面现象找到问题本质，解决架构问题，才能保持软件架构的相对健康度。   https://t.co/2k5tuox7gv
1520022248526344194 2022-04-29 12:48:39 +0000 <maguangguang> 做架构治理和演进，很多工作其实就是在修技术债  借着团队做架构治理，整理了一篇技术债相关的文章:   https://t.co/GPIn4clczC
1516604865388376066 2022-04-20 02:29:11 +0000 <maguangguang> 之前整理过一篇关于分层架构的文章： https://t.co/JZn8ECpAHP  分层架构最经典也最容易上手，但做好也是最难的，实际开发过程中，要么某一层过大过厚，要么层与层之间依赖混乱。  保持架构整洁除了架构原则，也需要团队的认知水平够高，“战斗力”够强。
1514166502660124673 2022-04-13 09:00:00 +0000 <maguangguang> 先前经历的项目，开始就是按微服务设计的架构，随着业务的演进，经历过一个服务拆分成两个，也经历过把几个服务合并为一个。  微服务拆分粒度始终是一个难题，MartinFowler在几年前的文章中推荐单体优先，有问题再去拆分。  根据我多年项目经验总结了迭代开发中的微服务拆分： https://t.co/filRwihWOi
1512603511208681477 2022-04-09 01:29:14 +0000 <maguangguang> 在微服务架构下，BFF模式是非常必要的一种实践，BFF分离了前后端，可以让前端和后端更专注在各自的领域。  软件架构中，边界处理是最难的，BFF作为中间层，其落地实践没有做好，会带来非常多的问题，成为整个架构中的瓶颈。借之前项目上BFF治理的经验写了篇文章，欢迎讨论：   https://t.co/BEft9xOTw8
['twitter'] poster drawer done in `OUT_FOLDER`
